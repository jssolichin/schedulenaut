{"version":3,"file":"main.js","names":[],"mappings":"","sources":["main.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nvar schedulenaut = angular.module('schedulenaut', [\r\n    'multipleDatePicker',\r\n    'ui.router',\r\n    require('./scheduler').name\r\n]).config(require('./common/routes'));\r\n\n},{\"./common/routes\":4,\"./scheduler\":8}],2:[function(require,module,exports){\n'use strict';\r\n\r\nmodule.exports = angular.module('d3', [])\r\n    .factory('d3Provider', ['$document', '$q', '$rootScope',\r\n        function($document, $q, $rootScope) {\r\n            var d = $q.defer();\r\n            function onScriptLoad(u){\r\n                $rootScope.$apply(function(){d.resolve(window.d3);});\r\n            }\r\n            var scriptTag = $document[0].createElement('script');\r\n            scriptTag.type = 'text/javascript';\r\n            scriptTag.async = true;\r\n            scriptTag.src = 'bower_components/d3/d3.js';\r\n            scriptTag.onreadystatechange = function (){\r\n                if(this.readyState == 'complete') onScriptLoad();\r\n            };\r\n            scriptTag.onload = onScriptLoad;\r\n            var s = $document[0]. getElementsByTagName('body')[0];\r\n            s.appendChild(scriptTag);\r\n\r\n            return {\r\n                d3: function(){ return d.promise;}\r\n            };\r\n        }]);\r\n\n},{}],3:[function(require,module,exports){\n'use strict';\r\n\r\nmodule.exports = angular.module('moment', [])\r\n    .factory('momentProvider', ['$document', '$q', '$rootScope',\r\n        function($document, $q, $rootScope) {\r\n            var d = $q.defer();\r\n            function onScriptLoad(u){\r\n                $rootScope.$apply(function(){d.resolve(window.moment);});\r\n            }\r\n            var scriptTag = $document[0].createElement('script');\r\n            scriptTag.type = 'text/javascript';\r\n            scriptTag.async = true;\r\n            scriptTag.src = 'bower_components/moment/moment.js';\r\n            scriptTag.onreadystatechange = function (){\r\n                if(this.readyState == 'complete') onScriptLoad();\r\n            };\r\n            scriptTag.onload = onScriptLoad;\r\n            var s = $document[0]. getElementsByTagName('body')[0];\r\n            s.appendChild(scriptTag);\r\n\r\n            return {\r\n                moment: function(){ return d.promise;}\r\n            };\r\n        }]);\r\n\n},{}],4:[function(require,module,exports){\n/**\r\n * Created by Jonathan on 2/3/2015.\r\n */\r\n'use strict';\r\n\r\nmodule.exports = function($stateProvider, $urlRouterProvider) {\r\n    //\r\n    // For any unmatched url, redirect to /state1\r\n    $urlRouterProvider.otherwise(\"/index\");\r\n    //\r\n    // Now set up the states\r\n    $stateProvider\r\n        .state('index', {\r\n            url: \"/index\",\r\n            templateUrl: \"public/partials/index.html\",\r\n            controller: require('../index/controller')\r\n        })\r\n        .state('scheduler', {\r\n            url: \"/scheduler\",\r\n            templateUrl: \"public/partials/scheduler.html\",\r\n            controller: require('../scheduler/controller')\r\n        })\r\n        .state('about', {\r\n            url: \"/about\",\r\n            templateUrl: \"public/partials/about.html\"\r\n        });\r\n};\r\n\n},{\"../index/controller\":5,\"../scheduler/controller\":6}],5:[function(require,module,exports){\n/**\r\n *\r\n * Created by Jonathan on 2/8/2015.\r\n */\r\n'use strict';\r\n\r\nmodule.exports = function ($scope){\r\n    $scope.dates = [];\r\n    $scope.logInfos = function (event, date){\r\n        event.preventDefault(); // prevent the select to happen\r\n\r\n        if(!date.selected)\r\n            $scope.dates.push(date.toDate());\r\n        else {\r\n            var index= $scope.dates.indexOf(date.toDate());\r\n            $scope.dates.splice(index, 1);\r\n        }\r\n\r\n        //reproduce the standard behavior\r\n        date.selected = !date.selected;\r\n    };\r\n\r\n    //scheduler\r\n    $scope.width = window.innerWidth-30;\r\n    $scope.height = window.innerHeight;\r\n\r\n};\r\n\n},{}],6:[function(require,module,exports){\n/**\r\n * Created by Jonathan on 2/8/2015.\r\n */\r\n'use strict';\r\nmodule.exports = function ($scope){\r\n    $scope.width = window.innerWidth;\r\n    $scope.height = window.innerHeight;\r\n    $scope.optionGranularity = [\r\n        {\r\n            name: '15 minutes',\r\n            value: 15\r\n        },\r\n        {\r\n            name: 'half-hour',\r\n            value: 30\r\n        },\r\n        {\r\n            name: 'hour',\r\n            value: 60\r\n        }\r\n    ];\r\n\r\n    $scope.selectedGranularity = 60;\r\n\r\n    var startDate = new Date();\r\n    startDate.setHours(0);\r\n    startDate.setMinutes(0);\r\n    startDate.setSeconds(0);\r\n\r\n    $scope.dates = [startDate];\r\n\r\n    for(var i = 1; i <= 7; i++){\r\n        var lastDate = $scope.dates[i-1].getTime();\r\n        var nextDate = new Date(lastDate);\r\n        nextDate.setDate(nextDate.getDate()+1);\r\n\r\n        $scope.dates.push(nextDate);\r\n    }\r\n};\r\n\n},{}],7:[function(require,module,exports){\n/**\r\n * Created by Jonathan on 2/9/2015.\r\n */\r\n\r\nmodule.exports = function (){\r\n    return {\r\n        round: function (date, interval){\r\n            //d3 does not have interval between minutes and hours.\r\n            //this function is a shim to get arbitrary minutes interval (e.g. 15 minutes, 30 minutes (half-hour)).\r\n            //given a date object, round to the nearest minute interval.\r\n\r\n            var minutes = date.getMinutes();\r\n            var hours = date.getHours();\r\n            var m,h;\r\n\r\n            m = (((minutes + (interval/2))/interval | 0) * interval) % 60;\r\n            h = ((((minutes/(120-interval)) + 0.5) | 0) + hours) % 24;\r\n\r\n            d0 = new Date(date);\r\n            d0.setMinutes(m);\r\n            d0.setHours(h);\r\n            d0.setSeconds(0);\r\n\r\n            return d0;\r\n        }\r\n    };\r\n};\r\n\n},{}],8:[function(require,module,exports){\n/**\r\n * Created by Jonathan on 1/25/2015.\r\n */\r\n\r\n'use strict';\r\n\r\nmodule.exports = angular.module('schedulenaut.scheduler', [\r\n    require('../common/d3Provider').name,\r\n    require('../common/momentProvider').name\r\n])\r\n    .factory('helpers', require('./helpers'))\r\n    .directive('scrub', require('./scrub'));\r\n    //.controller('ChartMgrCtrl', require('./ChartMgrCtrl'));\r\n\n},{\"../common/d3Provider\":2,\"../common/momentProvider\":3,\"./helpers\":7,\"./scrub\":9}],9:[function(require,module,exports){\n/**\r\n * Created by Jonathan on 1/25/2015.\r\n */\r\n\r\n'use strict';\r\n\r\nmodule.exports = function (helpers, d3Provider, momentProvider, $q) {\r\n    return {\r\n        restrict: 'A',\r\n        scope: {\r\n            height: '@',\r\n            width: '@',\r\n            granularity: '=',\r\n            scrub: '='\r\n        },\r\n        link: function (scope, element, attrs) {\r\n\r\n            var promises = [d3Provider.d3(), momentProvider.moment()];\r\n            $q.all(promises).then(function (promise) {\r\n                var d3 = promise[0];\r\n                var moment = promise[1];\r\n\r\n                scope.el = d3.select(element[0]);\r\n\r\n                var brushes = [];\r\n\r\n                var newBrush = function (container) {\r\n                    var brushed = function () {\r\n                        var extent0 = brush.extent(),\r\n                            extent1;\r\n\r\n                        // if dragging, preserve the width of the extent\r\n                        if (d3.event.mode === \"move\") {\r\n                            var d0, d1;\r\n\r\n                            if (scope.granularity === 60) {\r\n                                d0 = d3.time.hour.round(extent0[0]);\r\n                                d1 = d3.time.hour.offset(d0, Math.round((extent0[1] - extent0[0]) / 3600000));\r\n                            }\r\n                            else {\r\n                                d0 = helpers.round(extent0[0], scope.granularity);\r\n                                d1 = d3.time.minute.offset(d0, Math.round((extent0[1] - extent0[0]) / 60000));\r\n                            }\r\n\r\n                            extent1 = [d0, d1];\r\n\r\n                        }\r\n\r\n                        // otherwise, if resizing, round both dates\r\n                        else {\r\n\r\n                            // if hour we can use built in d3 function to round use floor & ceil instead\r\n                            if (scope.granularity === 60) {\r\n                                extent1 = extent0.map(d3.time.hour.round);\r\n                                if (extent1[0] >= extent1[1]) {\r\n                                    extent1[0] = d3.time.hour.floor(extent0[0]);\r\n                                    extent1[1] = d3.time.hour.ceil(extent0[1]);\r\n                                }\r\n                            }\r\n\r\n                            // else we just add minutes manually\r\n                            else {\r\n                                extent1 = extent0.slice(0);\r\n                                extent1[1].setMinutes(extent1[1].getMinutes() + scope.granularity);\r\n\r\n                                extent1[0] = helpers.round(extent0[0], scope.granularity);\r\n                                extent1[1] = helpers.round(extent0[1], scope.granularity);\r\n                            }\r\n\r\n                        }\r\n\r\n                        //make sure that event blocks (brush) do not overlap\r\n                        //brush.extent.start is a property created that holds the original extent of the bar when brush start\r\n                        if (brush.extent.start) {\r\n                            //time where we can not go pass as to not overlap\r\n                            var edge = [];\r\n\r\n                            //go through each event blocks and look for the 2 closest one on both side to the current one and store that to edge\r\n                            for (var i = 0; i < brushes.length; i++) {\r\n                                var otherBrush = brushes[i];\r\n\r\n                                if (otherBrush !== brush) {\r\n                                    if (otherBrush.extent()[1].getTime() <= brush.extent.start[0].getTime()) {\r\n                                        if (edge[0] !== undefined && otherBrush.extent()[1].getTime() > edge[0].getTime() || edge[0] === undefined)\r\n                                            edge[0] = otherBrush.extent()[1];\r\n                                    }\r\n                                    else if (otherBrush.extent()[0].getTime() > brush.extent.start[0].getTime()) {\r\n                                        if (edge[1] !== undefined && otherBrush.extent()[0].getTime() < edge[1].getTime() || edge[1] === undefined)\r\n                                            edge[1] = otherBrush.extent()[0];\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            //if the current block gets brushed beyond the surrounding block, limit it so it does not go past\r\n                            if (edge[1] !== undefined && extent1[1].getTime() > edge[1].getTime()) {\r\n                                extent1[1] = edge[1];\r\n                                //if we are moving, not only do we stop it from going past, but also keep the brush the same size\r\n                                if (d3.event.mode === \"move\")\r\n                                    extent1[0] = d3.time.hour.offset(extent1[1], -Math.round((brush.extent.start[1] - brush.extent.start[0]) / 3600000));\r\n                            } else if (edge[0] !== undefined && extent1[0].getTime() < edge[0].getTime()) {\r\n                                extent1[0] = edge[0];\r\n                                if (d3.event.mode === \"move\")\r\n                                    extent1[1] = d3.time.hour.offset(extent1[0], Math.round((brush.extent.start[1] - brush.extent.start[0]) / 3600000));\r\n                            }\r\n                        }\r\n\r\n                        d3.select(this).call(brush.extent(extent1));\r\n                    };\r\n\r\n                    var brushend = function () {\r\n\r\n\r\n                        gBrush.select('.background')\r\n                            .style('pointer-events', 'none');\r\n\r\n                        //When we finish brushing, the extent will be the starting extent for next time\r\n                        //This is useful for determining what is surrounding the current block later\r\n                        brush.extent.start = brush.extent();\r\n\r\n                        //Figure out whether we need to add a new brush or not.\r\n                        //If last brush has been modified, then it's been used and we need to add a new brush.\r\n                        //Else it's still empty, and we don't need to do anything.\r\n                        var lastBrushExtent = brushes[brushes.length - 1].extent();\r\n                        if (lastBrushExtent[0].getTime() !== lastBrushExtent[1].getTime())\r\n                            newBrush(container);\r\n                    };\r\n\r\n                    var brush = d3.svg.brush()\r\n                        .x(x)\r\n                        .on(\"brush\", brushed)\r\n                        .on(\"brushend\", brushend);\r\n\r\n                    brushes.push(brush);\r\n\r\n                    var gBrush = container.insert(\"g\", '.brush')\r\n                        .attr(\"class\", \"brush\")\r\n                        .on(\"click\", function () {\r\n                            d3.event.stopPropagation();\r\n                        })\r\n                        .call(brush);\r\n\r\n                    gBrush.selectAll(\"rect\")\r\n                        .attr(\"height\", height);\r\n\r\n\r\n                    return brush;\r\n                };\r\n\r\n                var margin = {top: 10, right: 10, bottom: 20, left: 10},\r\n                    width = parseInt(scope.width) - margin.left - margin.right,\r\n                    height = parseInt(scope.height) - margin.top - margin.bottom;\r\n\r\n                var endDate = new Date(scope.scrub.getTime());\r\n                endDate.setHours(endDate.getHours() + 23);\r\n\r\n                var x = d3.time.scale()\r\n                    .domain([scope.scrub, endDate])\r\n                    .range([0, width]);\r\n\r\n                var header = scope.el.append('h3')\r\n                    .html(function () {\r\n                        return moment(scope.scrub).format('MMMM Do');\r\n                    });\r\n\r\n                var svg = scope.el.append(\"svg\")\r\n                    .attr(\"width\", width + margin.left + margin.right)\r\n                    .attr(\"height\", height + margin.top + margin.bottom)\r\n                    .append(\"g\")\r\n                    .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n\r\n                svg.append(\"rect\")\r\n                    .attr(\"class\", \"grid-background\")\r\n                    .attr(\"width\", width)\r\n                    .attr(\"height\", height);\r\n\r\n                svg.append(\"g\")\r\n                    .attr(\"class\", \"x grid\")\r\n                    .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n                    .call(d3.svg.axis()\r\n                        .scale(x)\r\n                        .orient(\"bottom\")\r\n                        .ticks(d3.time.minute, 30)\r\n                        .tickSize(-height)\r\n                        .tickFormat(\"\"))\r\n                    .selectAll(\".tick\")\r\n                    .classed(\"minor\", function (d) {\r\n                        return d.getHours();\r\n                    });\r\n\r\n                svg.append(\"g\")\r\n                    .attr(\"class\", \"x axis\")\r\n                    .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n                    .call(d3.svg.axis()\r\n                        .scale(x)\r\n                        .orient(\"bottom\")\r\n                        .tickPadding(0))\r\n                    .selectAll(\"text\")\r\n                    .attr(\"x\", 6)\r\n                    .style(\"text-anchor\", null);\r\n\r\n                var brushesContainer = svg.append('g')\r\n                    .attr('class', 'brushes');\r\n\r\n                newBrush(brushesContainer);\r\n\r\n            }); //end promises\r\n        } //end link function\r\n    };\r\n};\r\n\r\n\n},{}]},{},[1]);\n"],"sourceRoot":"/source/"}